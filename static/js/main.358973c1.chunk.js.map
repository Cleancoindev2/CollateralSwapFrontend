{"version":3,"sources":["providers/getWeb3.js","controllers/Web3.js","components/Web3Unavailable.js","components/Web3NotEnabled.js","providers/getAddresses.js","controllers/GasStation.js","controllers/Swap.js","components/Warnings.js","components/SwapComponent.js","components/Web3Enabled.js","components/Information.js","App.js","index.js"],"names":["isEnabled","a","web3","Web3","window","ethereum","eth","getAccounts","accounts","length","getWeb3","Promise","resolve","reject","enable","account","defaultAccount","console","log","provider","providers","HttpProvider","setupWeb3","error","message","isWeb3Enabled","Web3Unavailable","Heading","size","color","Web3NotEnabled","props","Button","primary","onClick","loadWeb3","label","getAddresses","collateralSwap","beta","maker","proxyRegistry","cdpManager","jug","ethJoin","batJoin","daiJoin","ilkBatA","ilkEthA","aave","ethAddress","tokens","dai","bat","getGasPrice","fetch","response","json","fast","average","slightlyFasterThanAverage","toFixed","performSwap","cdpId","ethToBat","addresses","daiAddress","batAddress","getUsersProxy","myProxyAddress","data","abi","encodeParameters","utils","utf8ToHex","net","getId","networkId","deployedNetwork","SwapActions","networks","swapActions","Contract","address","flashloanCalldata","methods","swapCollateral","encodeABI","myProxyInstance","DSProxy","gasPrice","execute","send","from","gas","toWei","proxyRegistryInstance","ProxyRegistry","proxies","call","proxyAddress","Warnings","Box","width","align","margin","pad","round","background","elevation","Text","weight","Paragraph","fill","href","target","rel","SwapComponent","useState","setCdpId","userProxy","setUserProxy","useEffect","proxy","loading","setLoading","setMessage","txHash","setTxhash","swap","result","transactionHash","status","gap","TextInput","placeholder","value","onChange","event","disabled","Number","visible","type","height","Web3Enabled","Information","theme","global","font","family","App","setWeb3","setAccount","initalised","setInitalised","undefined","then","enabled","Grommet","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.358973c1.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nexport const isEnabled = async () => {\n  let web3 = new Web3(window.ethereum)\n  let accounts = await web3.eth.getAccounts()\n  return accounts !== null && accounts.length !== 0\n}\n\nconst getWeb3 = () =>\n  new Promise(async (resolve, reject) => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          let account = (await web3.eth.getAccounts())[0]\n          resolve({ web3, account });\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        let account = web3.eth.defaultAccount\n        console.log(\"Injected web3 detected.\");\n        resolve({ web3, account });\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        let account = web3.eth.defaultAccount\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve({ web3, account });\n      }\n  });\n\nexport default getWeb3;\n","import getWeb3, { isEnabled } from \"../providers/getWeb3\"\n\nexport const setupWeb3 = async () => {\n    try {\n        return await getWeb3()\n    } catch (error) {\n        console.error(`Failed to load web3, accounts, or contract: ${error.message}`)\n        return { web3: null, account: null }\n    }\n}\n\nexport const isWeb3Enabled = async () => await isEnabled()","import React from \"react\"\nimport { Heading } from \"grommet\"\n\nconst Web3Unavailable = () => (\n\t<Heading size=\"small\" color=\"status-critical\">\n\t\tNo Ethereum wallet detected! Try Metamask!\n\t</Heading>\n)\n\nexport default Web3Unavailable","import React from \"react\"\nimport { Button } from \"grommet\"\n\nconst Web3NotEnabled = (props) => <Button primary onClick={async () => await props.loadWeb3()} label=\"Connect your wallet\" />\n\nexport default Web3NotEnabled\n","/**\n * Returns the addresses needed for data encoding (mainnet!)\n * MakerDAO: https://changelog.makerdao.com/\n * Aave: https://developers.aave.com/#the-lendingpooladdressesprovider and https://github.com/aave/aave-protocol/blob/478244b0c5f85431b067a058d55bc7eb2b886cdb/contracts/libraries/EthAddressLib.sol#L10\n * Uniswap factory contract currently hardcoded as 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95\n * @returns { { maker: {}, aave: {}, tokens: {} } }\n */\nconst getAddresses = () => {\n    return {\n        collateralSwap: {\n            beta: \"0x5bca0f6cd5f9a74895d66005acef969342f301a0\"\n        },\n        maker: {\n            proxyRegistry: \"0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4\",\n            cdpManager: \"0x5ef30b9986345249bc32d8928B7ee64DE9435E39\",\n            jug: \"0x19c0976f590D67707E62397C87829d896Dc0f1F1\",\n            ethJoin: \"0x2F0b23f53734252Bda2277357e97e1517d6B042A\",\n            batJoin: \"0x3D0B1912B66114d4096F48A8CEe3A56C231772cA\",\n            daiJoin: \"0x9759A6Ac90977b93B58547b4A71c78317f391A28\",\n            ilkBatA: \"BAT-A\",\n            ilkEthA: \"ETH-A\",\n        },\n        aave: {\n            ethAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n        },\n        tokens: {\n            dai: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n            bat: \"0x0d8775f648430679a709e98d2b0cb6250d2887ef\",\n        }\n    }\n}\n\nexport default getAddresses;","const getGasPrice = async () => {\n    let response = await fetch(\"https://ethgasstation.info/json/ethgasAPI.json\")\n    let json = await response.json()\n\tlet fast = json.fast / 10\n\tlet average = json.average / 10\n    let slightlyFasterThanAverage = (fast - average) / 2 + average\n    return slightlyFasterThanAverage.toFixed(2)\n}\n\nexport default getGasPrice","import getAddresses from \"../providers/getAddresses\"\nimport getGasPrice from \"./GasStation\"\n\nimport DSProxy from \"../abi/DSProxy.json\"\nimport ProxyRegistry from \"../abi/ProxyRegistry.json\"\nimport SwapActions from \"../contracts/SwapActions.json\"\n\n/**\n * @param {  } web3 The web3 instance (usually metamask or their wallet)\n * @param {  } account The account to use for sending transactions\n * @param { Number } cdpId The CDP / Vault ID\n * @param { Boolean } ethToBat Whether the CDP is converting ETH collateral to BAT, or vice versa\n */\nexport const performSwap = async (web3, account, cdpId, ethToBat) => {\n\tlet addresses = getAddresses()\n\n\tlet cdpManager = addresses.maker.cdpManager\n\tlet jug = addresses.maker.jug\n\tlet ethJoin = addresses.maker.ethJoin\n\tlet batJoin = addresses.maker.batJoin\n\tlet daiJoin = addresses.maker.daiJoin\n\n\tlet daiAddress = addresses.tokens.dai\n\tlet batAddress = addresses.tokens.bat\n\tlet ethAddress = addresses.aave.ethAddress\n\n\tlet myProxyAddress = await getUsersProxy(web3, account)\n\t\n\tlet data\n\tif (ethToBat) {\n\t\tdata = web3.eth.abi.encodeParameters(\n\t\t\t[\"address\", \"uint\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"bytes32\"],\n\t\t\t[myProxyAddress, cdpId, batAddress, ethAddress, cdpManager, ethJoin, daiJoin, batJoin, jug, web3.utils.utf8ToHex(addresses.maker.ilkBatA)]\n\t\t)\n\t} else {\n\t\tdata = web3.eth.abi.encodeParameters(\n\t\t\t[\"address\", \"uint\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"bytes32\"],\n\t\t\t[myProxyAddress, cdpId, ethAddress, batAddress, cdpManager, ethJoin, daiJoin, batJoin, jug, web3.utils.utf8ToHex(addresses.maker.ilkEthA)]\n\t\t)\n\t}\n\n    let networkId = await web3.eth.net.getId()\n\tlet deployedNetwork = SwapActions.networks[networkId]\n    let swapActions = new web3.eth.Contract(SwapActions.abi, deployedNetwork && deployedNetwork.address)\n    \n\tlet flashloanCalldata = swapActions.methods.swapCollateral(cdpManager, addresses.collateralSwap.beta, daiAddress, cdpId, data).encodeABI()\n\n    let myProxyInstance = new web3.eth.Contract(DSProxy, myProxyAddress)\n    let gasPrice = await getGasPrice()\n\n\tlet response = await myProxyInstance.methods.execute(addresses.collateralSwap.beta, flashloanCalldata).send({\n\t\tfrom: account,\n\t\tgas: 2000000,\n\t\tgasPrice: web3.utils.toWei(`${gasPrice}`, \"gwei\")\n\t})\n\n\tconsole.log(response)\n\treturn response\n}\n\nexport const getUsersProxy = async (web3, account) => {\n\tlet proxyRegistryInstance = new web3.eth.Contract(ProxyRegistry, getAddresses().maker.proxyRegistry)\n\tlet proxyAddress = await proxyRegistryInstance.methods.proxies(account).call()\n\treturn proxyAddress === \"0x0000000000000000000000000000000000000000\" ? null : proxyAddress\n}","import React from \"react\"\nimport { Box, Text, Paragraph } from \"grommet\"\n\nconst Warnings = () => {\n\treturn (\n        <>\n\t\t<Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-critical\" elevation=\"medium\">\n\t\t\t<Text weight=\"bold\">Warnings</Text>\n\t\t\t<Paragraph margin=\"medium\" fill>\n\t\t\t\t<li>Use at your own risk!</li>\n\t\t\t\t<li>\n\t\t\t\t\tThe{\" \"}\n\t\t\t\t\t<a href=\"https://etherscan.io/address/0x5bca0f6cd5f9a74895d66005acef969342f301a0\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\tsmart contract\n\t\t\t\t\t</a>{\" \"}\n\t\t\t\t\tthat handles the Collateral Swap is unaudited.\n\t\t\t\t</li>\n\t\t\t\t<li>The contract does not ensure that you are below the liquidation percentage. Make sure you have plenty of breathing room!</li>\n\t\t\t</Paragraph>\n        </Box>\n        <Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-warning\" elevation=\"small\">\n\t\t\t<Text weight=\"bold\">Fees</Text>\n\t\t\t<Paragraph margin=\"medium\" fill>\n                <li>There is a fee automatically taken in DAI only if the entire transaction is successful.</li>\n                <li>Based on your vault's debt that needs to be swapped, the fee is 35 bps (goes to Aave) + 17.5 bps (goes to developer)</li>\n                <li>Fee example: Your vault currently has 100 DAI debt, therefore the fee is 0.525 DAI. Your new vault after the Collateral Swap will have\n\t\t\t\tan outstanding debt of 100.525 DAI debt.</li>\n            </Paragraph>\n        </Box>\n        <Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-warning\" elevation=\"xsmall\">\n\t\t\t<Text weight=\"bold\">Slippage</Text>\n\t\t\t<Paragraph margin=\"medium\" fill>\n                <li>As Uniswap is the only DEX used currently, there may be slippage in the collateral price swap, especially if you're swapping a large\n\t\t\t\tamount</li>\n            </Paragraph>\n        </Box>\n        </>\n\t)\n}\n\nexport default Warnings\n","import React, { useEffect, useState } from \"react\"\nimport { getUsersProxy, performSwap } from \"../controllers/Swap\"\nimport Warnings from \"./Warnings\"\n\nimport { Box, Button, Paragraph, Text, TextInput } from \"grommet\"\nimport Loader from \"react-loader-spinner\"\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nconst SwapComponent = (props) => {\n    let [cdpId, setCdpId] = useState(\"\")\n\n    function handleCdpChange(event) {\n        setCdpId(event.target.value)\n    }\n\n    let [userProxy, setUserProxy] = useState(null)\n\n    useEffect(() => {\n        if (props.web3 && props.account) {\n            (async () => {\n                let proxy = await getUsersProxy(props.web3, props.account)\n                setUserProxy(proxy)\n            })()\n        }\n    }, [props.web3, props.account])\n\n    let [loading, setLoading] = useState(false)\n    let [message, setMessage] = useState(\"\")\n    let [txHash, setTxhash] = useState(\"\")\n\n    async function swap(ethToBat) {\n        setLoading(true)\n        console.log(`Account: ${props.account}, DSProxy: ${userProxy}`)\n        try {\n            let result = await performSwap(props.web3, props.account, cdpId, ethToBat)\n            setTxhash(result ? result.transactionHash : \"\")\n            setMessage(`${result && result.status ? \"Successful\" : \"Unsuccessful\"} collateral swap`)\n        } catch (e) {\n            setMessage(`Error occured: ${e.message}`)\n        }\n        setLoading(false)\n    }\n    \n    if (!userProxy) {\n        return (\n\t\t\t<Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-warning\" elevation=\"medium\">\n\t\t\t\t<Text weight=\"bold\">It doesn't look like you've set up your account / Vault on MakerDAO's official Oasis.app.</Text>\n\t\t\t\t<Paragraph margin=\"small\" fill>\n\t\t\t\t\tComplete the setup steps on{\" \"}\n\t\t\t\t\t<a href=\"https://oasis.app/borrow\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\tOasis borrow\n\t\t\t\t\t</a>{\" \"}\n\t\t\t\t\tby:\n\t\t\t\t\t<li>Creating a vault</li>\n\t\t\t\t\t<li>Unlocking DAI</li>\n\t\t\t\t\t<li>Generating a small amount of debt (i.e. borrow DAI)</li>\n\t\t\t\t\t<li>Then refresh this page</li>\n\t\t\t\t</Paragraph>\n                <Paragraph margin=\"small\" fill>\n                    FYI for devs: we require that the user has Maker's standard DSProxy setup already.\n                </Paragraph>\n\t\t\t</Box>\n\t\t)\n    } else {\n        return (\n\t\t\t<>\n\t\t\t\t<Warnings />\n\t\t\t\t<Box width=\"medium\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" gap=\"medium\">\n\t\t\t\t\t<Text weight=\"bold\">Test with a small vault collateral first!</Text>\n\t\t\t\t\t<Text size=\"small\">\n\t\t\t\t\t\tCheck your vaults and their #'s on{\" \"}\n\t\t\t\t\t\t<a href=\"https://oasis.app/borrow\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\tOasis Borrow\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t.\n\t\t\t\t\t</Text>\n\t\t\t\t\t<TextInput placeholder=\"Your Mainnet Vault #\" value={cdpId} onChange={handleCdpChange} />\n\t\t\t\t\t<Text size=\"xsmall\">Make sure you select the correct Swap direction.</Text>\n\t\t\t\t\t<Button label=\"ETH to BAT Collateral Swap\" onClick={() => swap(true)} disabled={loading || Number(cdpId) === 0} />\n\t\t\t\t\t<Button label=\"BAT to ETH Collateral Swap\" onClick={() => swap(false)} disabled={loading || Number(cdpId) === 0} />\n\t\t\t\t\t<Text size=\"small\">{message}</Text>\n\t\t\t\t\t{txHash && (\n\t\t\t\t\t\t<Text size=\"small\">\n\t\t\t\t\t\t\t<a href={`https://etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\t\tSee transaction\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t)}\n\t\t\t\t\t<Loader visible={loading} type=\"ThreeDots\" color=\"#00C781\" width={40} height={40} />\n\t\t\t\t</Box>\n\t\t\t</>\n\t\t)\n    }\n}\n\nexport default SwapComponent","import React from \"react\"\nimport SwapComponent from \"./SwapComponent\"\n\nconst Web3Enabled = (props) => {\n    return (\n        <SwapComponent web3={props.web3} account={props.account}/>\n    )\n}\n\nexport default Web3Enabled\n","import React from \"react\"\nimport { Box, Paragraph, Text } from \"grommet\"\n\nconst Information = () => {\n    return (\n\t\t<Box width=\"large\">\n\t\t\t<Text weight=\"bold\">What is this?</Text>\n\t\t\t<Paragraph margin=\"none\" fill>\n\t\t\t\tSwap your vault's underlying collateral with another asset, in one transaction, without paying back the vault's debt.\n\t\t\t\t<br />\n\t\t\t\tThis uses the magic of open composable ethereum protocols, namely:{\" \"}\n\t\t\t\t<a href=\"https://makerdao.com/en/\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tMakerDAO's vaults\n\t\t\t\t</a>\n\t\t\t\t,{\" \"}\n\t\t\t\t<a href=\"https://aave.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tAave's flash loans\n\t\t\t\t</a>\n\t\t\t\t, and{\" \"}\n\t\t\t\t<a href=\"https://uniswap.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tUniswap's DEX\n\t\t\t\t</a>\n\t\t\t\t.<br /><br />\n\t\t\t\tMore info:{\" \"}\n\t\t\t\t<a href=\"https://twitter.com/daveytea/status/1224760425272745991?s=20\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tTwitter thread\n\t\t\t\t</a>\n\t\t\t\t.\n\t\t\t</Paragraph>\n\t\t</Box>\n\t)\n}\n\nexport default Information","import React, { useEffect, useState } from \"react\"\n\nimport { isWeb3Enabled, setupWeb3 } from \"./controllers/Web3\"\n\nimport Web3Unavailable from \"./components/Web3Unavailable\"\nimport Web3NotEnabled from \"./components/Web3NotEnabled\"\nimport Web3Enabled from \"./components/Web3Enabled\"\n\nimport Information from \"./components/Information\"\nimport { Grommet, Box, Heading } from \"grommet\"\n\nconst theme = {\n\tglobal: {\n\t\tfont: {\n\t\t\tfamily: \"Roboto\",\n\t\t\tsize: \"18px\",\n\t\t\theight: \"20px\"\n\t\t}\n\t}\n}\n\nconst App = () => {\n  let [web3, setWeb3] = useState(null)\n  let [account, setAccount] = useState(null)\n  let [initalised, setInitalised] = useState(0)\n\n  useEffect(() => {\n\t\tasync function isEnabled() { return await isWeb3Enabled() }\n\n\t\tif (window.ethereum !== undefined) {\n\t\t\tisEnabled().then(enabled => {\n\t\t\t\tif (enabled === true) loadWeb3()\n\t\t\t})\n\t\t}\n  }, [initalised])\n\n  const loadWeb3 = async () => {\n    try {\n\t\tlet { web3, account } = await setupWeb3()\n\t\tsetWeb3(web3)\n\t\tsetAccount(account)\n\t\tsetInitalised(1)\n    } catch (e) {\n\t\tconsole.error(`Failed to load web3, accounts, or contract: ${e.message}`)\n    }\n  }\n\n  return (\n\t\t<Grommet theme={theme}>\n\t\t\t<Box pad=\"medium\" align=\"center\">\n\t\t\t\t<Heading size=\"small\" textAlign=\"center\">Collateral Swap 🦺 (alpha)</Heading>\n        \t\t<Information />\n\t\t\t  \t{!window.ethereum ? <Web3Unavailable /> :\n\t\t\t\t  web3 != null ? \n\t\t\t\t\t<Web3Enabled web3={web3} account={account} /> :\n\t\t\t\t\t<Web3NotEnabled loadWeb3={loadWeb3} />\n\t\t\t\t}\n\t\t\t</Box>\n\t\t</Grommet>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById(\"root\")\n)\n"],"sourceRoot":""}