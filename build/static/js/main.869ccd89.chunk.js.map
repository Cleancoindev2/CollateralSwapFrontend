{"version":3,"sources":["providers/getWeb3.js","controllers/Web3.js","components/Web3Unavailable.js","components/Web3NotEnabled.js","providers/getAddresses.js","controllers/GasStation.js","controllers/Swap.js","components/Warnings.js","components/SwapComponent.js","components/Web3Enabled.js","components/Information.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","setupWeb3","forcePrompt","eth","getAccounts","accounts","error","message","Web3Unavailable","Heading","size","color","Web3NotEnabled","props","Button","primary","onClick","loadWeb3","label","getAddresses","collateralSwap","beta","maker","proxyRegistry","cdpManager","jug","ethJoin","batJoin","daiJoin","ilkBatA","ilkEthA","aave","ethAddress","tokens","dai","bat","getGasPrice","fetch","response","json","fast","average","slightlyFasterThanAverage","toFixed","performSwap","account","cdpId","ethToBat","addresses","daiAddress","batAddress","getUsersProxy","myProxyAddress","data","abi","encodeParameters","utils","utf8ToHex","net","getId","networkId","deployedNetwork","SwapActions","networks","swapActions","Contract","address","flashloanCalldata","methods","swapCollateral","encodeABI","myProxyInstance","DSProxy","gasPrice","execute","send","from","gas","toWei","proxyRegistryInstance","ProxyRegistry","proxies","call","Warnings","Box","width","align","margin","pad","round","background","elevation","Text","weight","Paragraph","fill","href","target","rel","SwapComponent","useState","setCdpId","userProxy","setUserProxy","swap","useEffect","proxy","gap","TextInput","placeholder","value","onChange","event","Web3Enabled","Information","theme","global","font","family","height","App","setWeb3","setAccounts","selectedAddress","web3setup","accountsSetup","content","noWeb3","notEnabled","enabled","checkForWeb3","Grommet","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.869ccd89.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import getWeb3 from \"../providers/getWeb3\"\n\nexport const checkForWeb3 = ({ noWeb3, notEnabled, enabled }) => {\n    return !window.ethereum ? \n        noWeb3 : window.ethereum.selectedAddress ? \n            enabled : notEnabled\n}\n\nexport const setupWeb3 = async (forcePrompt) => {\n    let web3;\n    let accounts;\n    try {\n        if (forcePrompt) {\n            await window.ethereum.enable()\n        }\n        web3 = await getWeb3()\n        accounts = await web3.eth.getAccounts()\n    } catch (error) {\n        console.error(`Failed to load web3, accounts, or contract: ${error.message}`)\n    }\n    return { web3, accounts }\n}\n","import React from \"react\"\nimport { Heading } from \"grommet\"\n\nconst Web3Unavailable = () => (\n\t<Heading size=\"small\" color=\"status-critical\">\n\t\tNo Ethereum wallet detected! Try Metamask!\n\t</Heading>\n)\n\nexport default Web3Unavailable","import React from \"react\"\nimport { Button } from \"grommet\"\n\nconst Web3NotEnabled = (props) => <Button primary onClick={async () => await props.loadWeb3(true)} label=\"Connect your wallet\" />\n\nexport default Web3NotEnabled\n","/**\n * Returns the addresses needed for data encoding (mainnet!)\n * MakerDAO: https://changelog.makerdao.com/\n * Aave: https://developers.aave.com/#the-lendingpooladdressesprovider and https://github.com/aave/aave-protocol/blob/478244b0c5f85431b067a058d55bc7eb2b886cdb/contracts/libraries/EthAddressLib.sol#L10\n * Uniswap factory contract currently hardcoded as 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95\n * @returns { { maker: {}, aave: {}, tokens: {} } }\n */\nconst getAddresses = () => {\n    return {\n        collateralSwap: {\n            beta: \"0x5bca0f6cd5f9a74895d66005acef969342f301a0\"\n        },\n        maker: {\n            proxyRegistry: \"0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4\",\n            cdpManager: \"0x5ef30b9986345249bc32d8928B7ee64DE9435E39\",\n            jug: \"0x19c0976f590D67707E62397C87829d896Dc0f1F1\",\n            ethJoin: \"0x2F0b23f53734252Bda2277357e97e1517d6B042A\",\n            batJoin: \"0x3D0B1912B66114d4096F48A8CEe3A56C231772cA\",\n            daiJoin: \"0x9759A6Ac90977b93B58547b4A71c78317f391A28\",\n            ilkBatA: \"BAT-A\",\n            ilkEthA: \"ETH-A\",\n        },\n        aave: {\n            ethAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n        },\n        tokens: {\n            dai: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n            bat: \"0x0d8775f648430679a709e98d2b0cb6250d2887ef\",\n        }\n    }\n}\n\nexport default getAddresses;","const getGasPrice = async () => {\n    let response = await fetch(\"https://ethgasstation.info/json/ethgasAPI.json\")\n    let json = await response.json()\n\tlet fast = json.fast / 10\n\tlet average = json.average / 10\n    let slightlyFasterThanAverage = (fast - average) / 2 + average\n    return slightlyFasterThanAverage.toFixed(2)\n}\n\nexport default getGasPrice","import getAddresses from \"../providers/getAddresses\"\nimport getGasPrice from \"./GasStation\"\n\nimport DSProxy from \"../abi/DSProxy.json\"\nimport ProxyRegistry from \"../abi/ProxyRegistry.json\"\nimport SwapActions from \"../contracts/SwapActions.json\"\n\n/**\n * @param {  } web3 The web3 instance (usually metamask or their wallet)\n * @param {  } account The account to use for sending transactions\n * @param { Number } cdpId The CDP / Vault ID\n * @param { Boolean } ethToBat Whether the CDP is converting ETH collateral to BAT, or vice versa\n */\nexport const performSwap = async (web3, account, cdpId, ethToBat) => {\n\tlet addresses = getAddresses()\n\n\tlet cdpManager = addresses.maker.cdpManager\n\tlet jug = addresses.maker.jug\n\tlet ethJoin = addresses.maker.ethJoin\n\tlet batJoin = addresses.maker.batJoin\n\tlet daiJoin = addresses.maker.daiJoin\n\n\tlet daiAddress = addresses.tokens.dai\n\tlet batAddress = addresses.tokens.bat\n\tlet ethAddress = addresses.aave.ethAddress\n\n\tlet myProxyAddress = await getUsersProxy(web3, account)\n\n\tconsole.log(`myProxyAddress: ${myProxyAddress}`)\n\t\n\tlet data\n\tif (ethToBat) {\n\t\tdata = web3.eth.abi.encodeParameters(\n\t\t\t[\"address\", \"uint\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"bytes32\"],\n\t\t\t[myProxyAddress, cdpId, batAddress, ethAddress, cdpManager, ethJoin, daiJoin, batJoin, jug, web3.utils.utf8ToHex(addresses.maker.ilkBatA)]\n\t\t)\n\t} else {\n\t\tdata = web3.eth.abi.encodeParameters(\n\t\t\t[\"address\", \"uint\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"address\", \"bytes32\"],\n\t\t\t[myProxyAddress, cdpId, ethAddress, batAddress, cdpManager, ethJoin, daiJoin, batJoin, jug, web3.utils.utf8ToHex(addresses.maker.ilkEthA)]\n\t\t)\n\t}\n\n    let networkId = await web3.eth.net.getId()\n\tlet deployedNetwork = SwapActions.networks[networkId]\n    let swapActions = new web3.eth.Contract(SwapActions.abi, deployedNetwork && deployedNetwork.address)\n    \n\tlet flashloanCalldata = swapActions.methods.swapCollateral(cdpManager, addresses.collateralSwap.beta, daiAddress, cdpId, data).encodeABI()\n\n    let myProxyInstance = new web3.eth.Contract(DSProxy, myProxyAddress)\n    let gasPrice = await getGasPrice()\n\n\tlet response = await myProxyInstance.methods.execute(addresses.collateralSwap.beta, flashloanCalldata).send({\n\t\tfrom: account,\n\t\tgas: 2000000,\n\t\tgasPrice: web3.utils.toWei(`${gasPrice}`, \"gwei\")\n\t})\n\n\tconsole.log(response)\n}\n\nexport const getUsersProxy = async (web3, account) => {\n\tlet proxyRegistryInstance = new web3.eth.Contract(ProxyRegistry, getAddresses().maker.proxyRegistry)\n\treturn await proxyRegistryInstance.methods.proxies(account).call()\n}","import React from \"react\"\nimport { Box, Text, Paragraph } from \"grommet\"\n\nconst Warnings = () => {\n\treturn (\n        <>\n\t\t<Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-critical\" elevation=\"medium\">\n\t\t\t<Text weight=\"bold\">Warnings</Text>\n\t\t\t<Paragraph margin=\"medium\" fill>\n\t\t\t\t<li>Use at your own risk!</li>\n\t\t\t\t<li>\n\t\t\t\t\tThe{\" \"}\n\t\t\t\t\t<a href=\"https://etherscan.io/address/0x5bca0f6cd5f9a74895d66005acef969342f301a0\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\tsmart contract\n\t\t\t\t\t</a>{\" \"}\n\t\t\t\t\tthat handles the Collateral Swap is unaudited.\n\t\t\t\t</li>\n\t\t\t\t<li>The contract does not ensure that you are below the liquidation percentage. Make sure you have plenty of breathing room!</li>\n\t\t\t</Paragraph>\n        </Box>\n        <Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-warning\" elevation=\"small\">\n\t\t\t<Text weight=\"bold\">Fees</Text>\n\t\t\t<Paragraph margin=\"medium\" fill>\n                <li>There is a fee automatically taken in DAI only if the entire transaction is successful.</li>\n                <li>Based on your vault's debt that needs to be swapped, the fee is 35 bps (goes to Aave) + 17.5 bps (goes to developer)</li>\n                <li>Fee example: Your vault currently has 100 DAI debt, therefore the fee is 0.525 DAI. Your new vault after the Collateral Swap will have\n\t\t\t\tan outstanding debt of 100.525 DAI debt.</li>\n            </Paragraph>\n        </Box>\n        <Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-warning\" elevation=\"xsmall\">\n\t\t\t<Text weight=\"bold\">Slippage</Text>\n\t\t\t<Paragraph margin=\"medium\" fill>\n                <li>As Uniswap is the only DEX used currently, there may be slippage in the collateral price swap, especially if you're swapping a large\n\t\t\t\tamount</li>\n            </Paragraph>\n        </Box>\n        </>\n\t)\n}\n\nexport default Warnings\n","import React, { useEffect, useState } from \"react\"\nimport { getUsersProxy, performSwap } from \"../controllers/Swap\"\nimport Warnings from \"./Warnings\"\nimport { Box, Button, Paragraph, Text, TextInput } from \"grommet\"\n\nconst SwapComponent = (props) => {\n    let [cdpId, setCdpId] = useState(null)\n\n    function handleCdpChange(event) {\n        setCdpId(event.target.value)\n    }\n\n    let [userProxy, setUserProxy] = useState(null)\n    useEffect(() => {\n        if (props.web3 && props.accounts) {\n            (async () => {\n                let proxy = await getUsersProxy(props.web3, props.accounts[0])\n                setUserProxy(proxy)\n            })()\n        }\n    }, [props.web3, props.accounts])\n\n    async function swap(ethToBat) {\n\t\tawait performSwap(props.web3, props.accounts[0], cdpId, ethToBat)\n    }\n    \n    if (!userProxy) {\n        return (\n\t\t\t<Box width=\"large\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" background=\"status-warning\" elevation=\"medium\">\n\t\t\t\t<Text weight=\"bold\">It doesn't look like you've set up your account on MakerDAO's official Oasis.app.</Text>\n\t\t\t\t<Paragraph margin=\"small\" fill>\n\t\t\t\t\tComplete the setup steps on{\" \"}\n\t\t\t\t\t<a href=\"https://oasis.app/borrow\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\tOasis borrow\n\t\t\t\t\t</a>{\" \"}\n\t\t\t\t\tby:\n\t\t\t\t\t<li>Creating a vault</li>\n\t\t\t\t\t<li>Unlocking DAI</li>\n\t\t\t\t\t<li>Generating a small amount of debt (i.e. borrow DAI)</li>\n\t\t\t\t\t<li>Then refresh this page</li>\n\t\t\t\t</Paragraph>\n                <Paragraph margin=\"small\" fill>\n                    FYI for devs: we require that the user has Maker's standard DSProxy setup already.\n                </Paragraph>\n\t\t\t</Box>\n\t\t)\n    } else {\n        return (\n            <>\n                <Warnings />\n                <Box width=\"medium\" align=\"center\" margin=\"medium\" pad=\"small\" round=\"small\" gap=\"medium\">\n                    <Text weight=\"bold\">Test with a small vault collateral first!</Text>\n                    <TextInput\n                        placeholder=\"Your Vault #\"\n                        value={cdpId}\n                        onChange={handleCdpChange} \n                    />\n                    <Button label=\"ETH to BAT Collateral Swap\" onClick={() => swap(true)} />\n                    <Button label=\"BAT to ETH Collateral Swap\" onClick={() => swap(false)} />\n                </Box>\n            </>\n        )\n    }\n}\n\nexport default SwapComponent","import React from \"react\"\nimport SwapComponent from \"./SwapComponent\"\n\nconst Web3Enabled = (props) => {\n    return (\n        <SwapComponent web3={props.web3} accounts={props.accounts}/>\n    )\n}\n\nexport default Web3Enabled\n","import React from \"react\"\nimport { Box, Paragraph, Text } from \"grommet\"\n\nconst Information = () => {\n    return (\n\t\t<Box width=\"large\">\n\t\t\t<Text weight=\"bold\">What is this?</Text>\n\t\t\t<Paragraph margin=\"none\" fill>\n\t\t\t\tSwap your vault's underlying collateral with another asset, in one transaction, without paying back the vault's debt.\n\t\t\t\t<br />\n\t\t\t\tThis uses the magic of open composable ethereum protocols, namely:{\" \"}\n\t\t\t\t<a href=\"https://makerdao.com/en/\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tMakerDAO's vaults\n\t\t\t\t</a>\n\t\t\t\t,{\" \"}\n\t\t\t\t<a href=\"https://aave.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tAave's flash loans\n\t\t\t\t</a>\n\t\t\t\t, and{\" \"}\n\t\t\t\t<a href=\"https://uniswap.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tUniswap's DEX\n\t\t\t\t</a>\n\t\t\t\t.<br /><br />\n\t\t\t\tMore info:{\" \"}\n\t\t\t\t<a href=\"https://twitter.com/daveytea/status/1224760425272745991?s=20\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tTwitter thread\n\t\t\t\t</a>\n\t\t\t\t.\n\t\t\t</Paragraph>\n\t\t</Box>\n\t)\n}\n\nexport default Information","import React, { useEffect, useState } from \"react\"\nimport { checkForWeb3, setupWeb3 } from \"./controllers/Web3\"\n\nimport Web3Unavailable from \"./components/Web3Unavailable\"\nimport Web3NotEnabled from \"./components/Web3NotEnabled\"\nimport Web3Enabled from \"./components/Web3Enabled\"\n\nimport Information from \"./components/Information\"\nimport { Grommet, Box, Heading } from \"grommet\"\n\nconst theme = {\n\tglobal: {\n\t\tfont: {\n\t\t\tfamily: \"Roboto\",\n\t\t\tsize: \"18px\",\n\t\t\theight: \"20px\"\n\t\t}\n\t}\n}\n\nconst App = () => {\n  \n  let [web3, setWeb3] = useState(null)\n  let [accounts, setAccounts] = useState(null)\n\n  useEffect(() => {\n\t\tif (window.ethereum && window.ethereum.selectedAddress) {\n\t\t\tloadWeb3()\n\t\t}\n  }, [web3, accounts])\n\n  const loadWeb3 = async (forcePrompt) => {\n    try {\n      let { web3: web3setup, accounts: accountsSetup } = await setupWeb3(forcePrompt)\n      setWeb3(web3setup)\n      setAccounts(accountsSetup)\n    } catch (e) {\n      console.log(e.message)\n    }\n  }\n  \n  const content = checkForWeb3({\n\t\tnoWeb3: <Web3Unavailable />,\n\t\tnotEnabled: <Web3NotEnabled loadWeb3={loadWeb3} />,\n\t\tenabled: <Web3Enabled web3={web3} accounts={accounts} />\n  })\n\n  return (\n\t\t<Grommet theme={theme}>\n\t\t\t<Box pad=\"medium\" align=\"center\">\n\t\t\t\t<Heading size=\"small\" textAlign=\"center\">Collateral Swap 🦺 (beta)</Heading>\n        <Information />\n\t\t\t\t{content}\n\t\t\t</Box>\n\t\t</Grommet>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}